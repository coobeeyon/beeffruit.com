---
const title = Astro.props?.title ?? 'Trending Weirdness';
---
<section class="py-8">
  <div id="bf-feed" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4"></div>
  <button id="bf-more" class="mt-6 w-full bg-yellow-400 text-black hover:bg-yellow-500 py-3 font-bold uppercase tracking-wide transition-colors">Load More Content</button>
</section>

<script>
  const FEED_URL = '/data/items.json';
  let all = [];
  let idx = 0;
  const batch = 12;

  // Content chaos generators
  const prefixes = [
    'üö® BREAKING:', '‚ö†Ô∏è WARNING:', 'üí• EXCLUSIVE:', 'üî• HOT TAKE:', 
    'üëÅÔ∏è THEY DON\'T WANT YOU TO KNOW:', 'üéØ FACT:', 'üåü LEAKED:', 
    'üíÄ CURSED:', 'üîÆ PREDICTION:', 'üé™ CIRCUS ALERT:', 'üß† BIG BRAIN:',
    '‚ö° URGENT:', 'üé≠ PLOT TWIST:', 'üåà MIRACLE:', 'ü¶æ GIGACHAD:'
  ];

  const suffixes = [
    '(GONE WRONG)', '(EMOTIONAL)', '(3AM CHALLENGE)', '(NOT CLICKBAIT)',
    '(COPS CALLED)', '(SCIENTIFICALLY PROVEN)', '(DOCTORS HATE THIS)',
    '(YOU WON\'T BELIEVE #7)', '(LIFE-CHANGING)', '(INSTANT REGRET)',
    '(99% FAIL)', '(IMPOSSIBLE)', '(GLITCH IN THE MATRIX)', '(REAL)',
    '??? EXPLAINED', '... AND THAT\'S A GOOD THING', '[UPDATED 2025]'
  ];

  const ratings = [
    '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê 5/5 BEEF', 'üçñ 10/10 MEAT SCORE', 'ü•© PRIME CUT',
    'üçâ FRUIT LEVEL: MAXIMUM', 'üíØ CERTIFIED', '‚úÖ FACT-CHECKED BY NOBODY',
    'üèÜ AWARD-WINNING NONSENSE', 'üìä 87% OF STATISTICS ARE MADE UP',
    'üéØ ACCURACY: QUESTIONABLE', 'üî¨ PEER REVIEWED BY MY CAT'
  ];

  const warnings = [
    '‚ö†Ô∏è Side effects may include enlightenment',
    '‚ö†Ô∏è Not suitable for robots',
    '‚ö†Ô∏è Contains trace amounts of truth',
    '‚ö†Ô∏è May cause spontaneous beef cravings',
    '‚ö†Ô∏è Warranty void if actually read',
    '‚ö†Ô∏è FDA has not evaluated these claims',
    '‚ö†Ô∏è Results not typical',
    '‚ö†Ô∏è May contain nuts (definitely contains fruits)'
  ];

  const testimonials = [
    '"Changed my life" - Anonymous Beef',
    '"I can\'t stop reading" - Local Fruit',
    '"This cured my boredom" - Internet Person',
    '"10/10 would click again" - Your Mom',
    '"Finally, the truth!" - Conspiracy Theorist',
    '"I showed this to my therapist" - Reddit User',
    '"Why did I read this?" - You, probably'
  ];

  const prices = [
    'WAS $999 NOW FREE', 'LIMITED TIME: $0.00', 'SPECIAL OFFER: YOUR SOUL',
    'PRICE: 3 EASY PAYMENTS OF CHAOS', 'VALUE: PRICELESS', 'COST: 5 MINUTES YOU\'LL NEVER GET BACK'
  ];

  function getRandomElement(arr) {
    return arr[Math.floor(Math.random() * arr.length)];
  }

  function generateChaosContent(item) {
    const templates = [
      // Standard with prefix/suffix
      () => ({
        title: `${Math.random() > 0.5 ? getRandomElement(prefixes) + ' ' : ''}${item.title}${Math.random() > 0.5 ? ' ' + getRandomElement(suffixes) : ''}`,
        extra: Math.random() > 0.7 ? getRandomElement(ratings) : ''
      }),
      // Review format
      () => ({
        title: item.title,
        extra: `<div class="mt-2 text-xs text-gray-600">${getRandomElement(testimonials)}</div>`
      }),
      // Warning format
      () => ({
        title: item.title.toUpperCase(),
        extra: `<div class="mt-2 text-xs text-orange-600 font-semibold">${getRandomElement(warnings)}</div>`
      }),
      // Price drop format
      () => ({
        title: item.title,
        extra: `<div class="mt-2 text-sm font-bold text-green-600">${getRandomElement(prices)}</div>`
      }),
      // Question format
      () => ({
        title: `Is ${item.title}? The Answer Will SHOCK You`,
        extra: ''
      }),
      // Versus format
      () => ({
        title: `${item.title} vs. ${getRandomElement(['REALITY', 'YOUR EXPECTATIONS', 'COMMON SENSE', 'THE ESTABLISHMENT', 'BIG FRUIT'])}`,
        extra: ''
      }),
      // List format
      () => ({
        title: `${Math.floor(Math.random() * 50 + 5)} Reasons Why ${item.title}`,
        extra: `<div class="text-xs mt-1 text-gray-600">#${Math.floor(Math.random() * 20 + 1)} will make you cry</div>`
      }),
      // Timeline format
      () => ({
        title: item.title,
        extra: `<div class="text-xs mt-2 text-gray-500">Posted ${Math.floor(Math.random() * 59 + 1)} ${getRandomElement(['seconds', 'minutes', 'hours', 'days', 'years', 'centuries'])} ago</div>`
      }),
      // BREAKING NEWS format
      () => ({
        title: item.title,
        extra: `<div class="text-xs mt-2 text-red-500 font-bold animate-pulse">DEVELOPING STORY</div>`
      }),
      // Recipe format
      () => ({
        title: `RECIPE: ${item.title}`,
        extra: `<div class="text-xs mt-1 text-gray-600">Prep: ${Math.random() * 100}min | Serves: ${Math.random() > 0.5 ? 'Nobody' : Math.floor(Math.random() * 1000)}</div>`
      })
    ];

    return templates[Math.floor(Math.random() * templates.length)]();
  }

  // Card type generators for content variety with weighted distribution
  function generateCardType() {
    const rand = Math.random();
    
    // Weighted distribution to reduce review frequency
    if (rand < 0.35) return { type: 'standard', height: 'auto' };        // 35% standard
    else if (rand < 0.50) return { type: 'tall', height: 'min-h-[300px]' }; // 15% tall
    else if (rand < 0.62) return { type: 'quote', height: 'auto' };      // 12% quotes
    else if (rand < 0.74) return { type: 'stat', height: 'auto' };       // 12% stats
    else if (rand < 0.84) return { type: 'warning', height: 'auto' };    // 10% warnings
    else if (rand < 0.92) return { type: 'fact', height: 'auto' };       // 8% facts
    else if (rand < 0.97) return { type: 'recipe', height: 'auto' };     // 5% recipes
    else return { type: 'review', height: 'auto' };                      // 3% reviews (with stars)
  }

  async function load() {
    if (all.length === 0) {
      try {
        const res = await fetch(FEED_URL);
        all = await res.json();
      } catch (err) {
        console.error('Failed to load feed', err);
        return;
      }
    }
    
    const container = document.getElementById('bf-feed');
    const slice = all.slice(idx, idx + batch);
    idx += slice.length;
    
    for (let i = 0; i < slice.length; i++) {
      const item = slice[i];
      const tag = item.url ? 'a' : 'article';
      const card = document.createElement(tag);
      
      // Generate chaotic content
      const content = generateChaosContent(item);
      const cardType = generateCardType();
      
      // Clean, consistent styling for light theme
      card.className = `group block p-4 bg-white border-2 border-gray-200 hover:border-yellow-400 hover:shadow-lg transition-all duration-200 ${cardType.height}`;
      
      if (item.url) card.setAttribute('href', item.url);
      
      // Generate different card layouts based on type
      let cardHTML = '';
      
      switch(cardType.type) {
        case 'quote':
          cardHTML = `
            <blockquote class="border-l-4 border-red-500 pl-4">
              <p class="text-lg italic mb-2 text-gray-800">"${content.title}"</p>
              <cite class="text-sm text-gray-600">- ${getRandomElement(['Ancient Wisdom', 'Internet Sage', 'My Uncle', 'Source: Trust Me', 'Anonymous Fruit'])}</cite>
            </blockquote>
            ${content.extra}
            ${item.url ? '<div class="text-blue-600 text-sm font-bold opacity-0 group-hover:opacity-100 transition mt-3">EXPLORE ‚Üí</div>' : ''}
          `;
          break;
          
        case 'stat':
          const percentage = Math.floor(Math.random() * 100);
          cardHTML = `
            <div class="text-center">
              <div class="text-4xl font-black text-yellow-500 mb-2">${percentage}%</div>
              <p class="text-sm text-gray-800">${content.title}</p>
              <div class="text-xs mt-2 text-gray-600">Sample size: ${Math.floor(Math.random() * 10) + 1} ${getRandomElement(['people', 'fruits', 'beefs', 'vibes', 'thoughts'])}</div>
              ${item.url ? '<div class="text-blue-600 text-sm font-bold opacity-0 group-hover:opacity-100 transition mt-3">SEE DATA ‚Üí</div>' : ''}
            </div>
          `;
          break;
          
        case 'warning':
          cardHTML = `
            <div class="bg-red-50 border border-red-300 rounded p-3">
              <div class="text-red-600 font-bold mb-1">‚ö†Ô∏è ALERT ‚ö†Ô∏è</div>
              <p class="text-sm text-gray-800">${content.title}</p>
              ${content.extra}
              ${item.url ? '<div class="text-red-600 text-sm font-bold opacity-0 group-hover:opacity-100 transition mt-2">LEARN MORE ‚Üí</div>' : ''}
            </div>
          `;
          break;
          
        case 'recipe':
          cardHTML = `
            <div>
              <div class="text-xs text-green-600 font-bold mb-1">RECIPE</div>
              <h3 class="font-bold text-gray-900 mb-2">${content.title}</h3>
              <div class="text-sm text-gray-700">
                <div>Ingredients: ${getRandomElement(['Chaos', 'Hope', 'Beef', 'Fruit', 'Vibes', 'Energy'])} + ${getRandomElement(['Dreams', 'Nightmares', 'Salt', 'Pepper', 'Love', 'Rage'])}</div>
                <div class="mt-1">Instructions: ${getRandomElement(['Mix until confused', 'Shake vigorously', 'Contemplate existence', 'Add heat', 'Serve immediately', 'Abandon all hope'])}</div>
              </div>
              ${item.url ? '<div class="text-blue-600 text-sm font-bold opacity-0 group-hover:opacity-100 transition mt-3">GET RECIPE ‚Üí</div>' : ''}
            </div>
          `;
          break;
          
        case 'review':
          const stars = Math.floor(Math.random() * 5) + 1;
          cardHTML = `
            <div>
              <div class="text-yellow-500 mb-1">${'‚≠ê'.repeat(stars)}${'‚òÜ'.repeat(5-stars)}</div>
              <h3 class="font-bold text-gray-900 mb-1">${content.title}</h3>
              <p class="text-sm text-gray-700 mb-2">${item.blurb}</p>
              ${content.extra}
              ${item.url ? '<div class="text-blue-600 text-sm font-bold opacity-0 group-hover:opacity-100 transition mt-2">READ REVIEW ‚Üí</div>' : ''}
            </div>
          `;
          break;
          
        case 'fact':
          cardHTML = `
            <div class="bg-blue-50 rounded p-3">
              <div class="text-xs font-bold text-blue-600 mb-1">üß† FUN FACT</div>
              <p class="text-sm text-gray-800">${content.title}</p>
              <div class="text-xs mt-2 text-gray-600">Source: ${getRandomElement(['Wikipedia', 'My dreams', 'Ancient scrolls', 'The void', 'Trust me bro'])}</div>
              ${item.url ? '<div class="text-blue-600 text-sm font-bold opacity-0 group-hover:opacity-100 transition mt-2">VERIFY ‚Üí</div>' : ''}
            </div>
          `;
          break;
          
        default:
          // Only show emoji sometimes, and vary the layout
          const showEmoji = Math.random() > 0.7; // Reduce emoji frequency even more
          const showBlurb = Math.random() > 0.2;
          
          // Replace sparkles emoji with random varied emojis or skip it
          const displayEmoji = (item.emoji === '‚ú®') ? 
            (Math.random() > 0.5 ? '' : getRandomElement(['ü§Ø', 'üçñ', 'üçâ', 'üî•', 'üí•', 'üåà', 'ü¶æ', 'üåÆ', 'üçï', 'üçî', 'üéÜ', 'üéÉ', 'üëæ', 'ü§ñ'])) : 
            item.emoji;
          
          cardHTML = `
            <div>
              <h3 class="font-bold text-lg mb-2 text-gray-900">${content.title}</h3>
              ${showBlurb ? `<p class="text-sm text-gray-600 mb-3">${item.blurb}</p>` : ''}
              ${content.extra}
              ${(showEmoji && displayEmoji) || item.url ? `
                <div class="flex items-center justify-between mt-3">
                  ${(showEmoji && displayEmoji) ? `<span class="text-2xl">${displayEmoji}</span>` : '<span></span>'}
                  ${item.url ? '<span class="text-blue-600 text-sm font-bold opacity-0 group-hover:opacity-100 transition">READ ‚Üí</span>' : ''}
                </div>
              ` : ''}
            </div>
          `;
      }
      
      // Add random badges
      if (Math.random() > 0.8) {
        const badges = [
          '<span class="absolute -top-2 -right-2 bg-red-500 text-white text-xs px-2 py-1 rounded-full font-bold">NEW</span>',
          '<span class="absolute -top-2 -right-2 bg-yellow-400 text-black text-xs px-2 py-1 rounded-full font-bold">HOT</span>',
          '<span class="absolute -top-2 -right-2 bg-red-600 text-white text-xs px-2 py-1 rounded-full font-bold animate-pulse">LIVE</span>',
          '<span class="absolute -top-2 -right-2 bg-gradient-to-r from-purple-600 to-pink-600 text-white text-xs px-2 py-1 rounded-full font-bold">VIRAL</span>'
        ];
        cardHTML = `<div class="relative">${cardHTML}${getRandomElement(badges)}</div>`;
      }
      
      card.innerHTML = cardHTML;
      container.appendChild(card);
    }
  }

  document.getElementById('bf-more')?.addEventListener('click', load);
  load();
</script>

