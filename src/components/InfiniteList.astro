---
const title = Astro.props?.title ?? 'Trending Weirdness';
---
<section class="py-8 overflow-x-hidden">
  <h2 class="text-2xl md:text-3xl font-bold mb-4">{title}</h2>
  <div id="bf-feed" class="relative min-h-[800px]"></div>
  <button id="bf-more" class="mt-6 w-full rounded-lg bg-brand-pink/20 text-brand-pink hover:bg-brand-pink/30 py-3 font-semibold relative z-50">More oddities</button>
</section>

<script>
  const FEED_URL = '/data/items.json';
  let all = [];
  let idx = 0;
  const batch = 15;
  let currentY = 0;
  let zones = [];

  // Layout patterns
  const layouts = [
    'standard',
    'wide',
    'tall',
    'huge',
    'tiny',
    'floating',
    'diagonal',
    'overlapping'
  ];

  // Simple, readable backgrounds
  const bgColors = [
    'bg-black/90',
    'bg-brand-pink/20',
    'bg-brand-yellow/20',
    'bg-brand-green/20',
    'bg-brand-blue/20',
    'bg-gradient-to-br from-black/80 to-brand-pink/20',
    'bg-gradient-to-tl from-black/80 to-brand-yellow/20',
    'bg-white/5',
    'bg-purple-900/20',
    'bg-red-900/20'
  ];

  const borderStyles = [
    'border-2 border-brand-pink/50',
    'border border-brand-yellow',
    'border-l-4 border-l-brand-pink',
    'border-t-4 border-t-brand-yellow',
    'border border-white/20',
    'border-0',
    'border-2 border-white/10'
  ];

  function getRandomElement(arr) {
    return arr[Math.floor(Math.random() * arr.length)];
  }

  function getCardDimensions(layout) {
    switch(layout) {
      case 'wide': return { w: 400 + Math.random() * 200, h: 150 + Math.random() * 50 };
      case 'tall': return { w: 200 + Math.random() * 50, h: 300 + Math.random() * 100 };
      case 'huge': return { w: 500 + Math.random() * 100, h: 400 + Math.random() * 100 };
      case 'tiny': return { w: 150 + Math.random() * 50, h: 100 + Math.random() * 50 };
      case 'standard': return { w: 280 + Math.random() * 40, h: 180 + Math.random() * 40 };
      case 'floating': return { w: 250 + Math.random() * 50, h: 200 + Math.random() * 50 };
      case 'diagonal': return { w: 300 + Math.random() * 100, h: 200 + Math.random() * 100 };
      case 'overlapping': return { w: 320 + Math.random() * 80, h: 220 + Math.random() * 60 };
      default: return { w: 280, h: 180 };
    }
  }

  function findAvailablePosition(width, height, container) {
    const containerWidth = container.offsetWidth;
    const maxAttempts = 50;
    let attempt = 0;
    
    while (attempt < maxAttempts) {
      let x, y;
      
      // Try different positioning strategies
      if (Math.random() > 0.7) {
        // Cluster near existing content
        if (zones.length > 0) {
          const zone = zones[Math.floor(Math.random() * zones.length)];
          x = zone.x + (Math.random() - 0.5) * 200;
          y = zone.y + (Math.random() - 0.5) * 200;
        } else {
          x = Math.random() * (containerWidth - width);
          y = currentY + Math.random() * 200;
        }
      } else {
        // Random placement with some structure
        const column = Math.floor(Math.random() * 3);
        x = (containerWidth / 3) * column + Math.random() * (containerWidth / 3 - width);
        y = currentY + Math.random() * 300;
      }
      
      // Keep within bounds
      x = Math.max(0, Math.min(x, containerWidth - width));
      y = Math.max(0, y);
      
      // Add some intentional overlapping
      if (Math.random() > 0.8 && zones.length > 0) {
        const overlap = zones[zones.length - 1];
        x = overlap.x + Math.random() * 50 - 25;
        y = overlap.y + Math.random() * 50 - 25;
      }
      
      return { x, y };
    }
    
    // Fallback
    return { 
      x: Math.random() * (containerWidth - width), 
      y: currentY 
    };
  }

  async function load() {
    if (all.length === 0) {
      try {
        const res = await fetch(FEED_URL);
        all = await res.json();
      } catch (err) {
        console.error('Failed to load feed', err);
        return;
      }
    }
    
    const container = document.getElementById('bf-feed');
    const slice = all.slice(idx, idx + batch);
    idx += slice.length;
    
    // Calculate container height dynamically
    let maxY = currentY;
    
    for (let i = 0; i < slice.length; i++) {
      const item = slice[i];
      const tag = item.url ? 'a' : 'article';
      const card = document.createElement(tag);
      
      // Choose layout type
      const layout = getRandomElement(layouts);
      const dimensions = getCardDimensions(layout);
      const position = findAvailablePosition(dimensions.w, dimensions.h, container);
      
      // Store zone for clustering
      zones.push({ x: position.x, y: position.y, w: dimensions.w, h: dimensions.h });
      
      // Position absolutely
      card.style.position = 'absolute';
      card.style.left = `${position.x}px`;
      card.style.top = `${position.y}px`;
      card.style.width = `${dimensions.w}px`;
      card.style.height = `${dimensions.h}px`;
      card.style.zIndex = Math.floor(Math.random() * 10) + 1;
      
      // Rotation for variety
      const rotation = Math.random() * 6 - 3;
      card.style.transform = `rotate(${rotation}deg)`;
      
      // Build classes for styling
      const classes = [
        'group block p-4 transition-all duration-300 overflow-hidden',
        getRandomElement(bgColors),
        getRandomElement(borderStyles),
        'rounded-lg hover:z-50 hover:scale-105'
      ].join(' ');
      
      card.className = classes;
      
      if (item.url) card.setAttribute('href', item.url);
      
      // Adjust content based on card size
      const isSmall = layout === 'tiny';
      const isLarge = layout === 'huge' || layout === 'wide';
      
      // Title sizing based on card size
      const titleSize = isSmall ? 'text-sm font-bold' : 
                       isLarge ? 'text-2xl font-black' : 
                       'text-lg font-bold';
      
      // Show/hide blurb based on size
      const showBlurb = !isSmall || Math.random() > 0.5;
      
      card.innerHTML = `
        <div class="h-full flex flex-col justify-between">
          <div>
            <h3 class="${titleSize} mb-2 line-clamp-3">
              ${item.title}
            </h3>
            ${showBlurb ? `<p class="text-sm text-gray-300 line-clamp-2">${item.blurb}</p>` : ''}
          </div>
          <div class="mt-auto pt-2 flex items-center justify-between">
            <span class="text-2xl">${item.emoji ?? 'ðŸŽ²'}</span>
            ${item.url ? `<span class="text-brand-yellow text-sm opacity-0 group-hover:opacity-100 transition font-bold">
              ${layout === 'tiny' ? 'â†’' : 'VIEW'}
            </span>` : ''}
          </div>
          ${Math.random() > 0.85 ? `<div class="absolute top-2 right-2 bg-brand-pink text-white text-xs px-2 py-1 rounded font-bold">
            ${['NEW', 'HOT', 'WILD'][Math.floor(Math.random() * 3)]}
          </div>` : ''}
        </div>
      `;
      
      // Special effects for certain layouts
      if (layout === 'floating') {
        card.classList.add('hover:-translate-y-2');
      }
      if (layout === 'diagonal') {
        card.style.transform = `rotate(${rotation * 3}deg)`;
      }
      if (layout === 'overlapping' && i > 0) {
        card.style.opacity = '0.95';
      }
      
      container.appendChild(card);
      
      // Track maximum Y for container height
      maxY = Math.max(maxY, position.y + dimensions.h);
    }
    
    // Update container height
    container.style.minHeight = `${maxY + 100}px`;
    currentY = maxY - 300; // Some overlap for next batch
    
    // Keep only recent zones to prevent memory issues
    if (zones.length > 50) {
      zones = zones.slice(-30);
    }
  }

  document.getElementById('bf-more')?.addEventListener('click', load);
  load();
</script>

